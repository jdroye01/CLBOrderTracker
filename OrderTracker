import sqlite3
import tkinter as tk
from tkinter import ttk, simpledialog, messagebox
import pandas as pd
from datetime import datetime

DB_FILE = "company_data.db"
conn = sqlite3.connect(DB_FILE)
cursor = conn.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS tabs (name TEXT PRIMARY KEY)")
conn.commit()

class App(tk.Tk):
    def __init__(self):
        super().__init__()
        import os
        icon_path = os.path.join(os.path.dirname(__file__), "CLB_Logo.ico")
        self.iconbitmap(icon_path)
        self.title("Order Tracker")
        self.state('zoomed')  # Windows fullscreen
        self.admin_mode = tk.BooleanVar(value=True)
        self.selected_tab = tk.StringVar()
        self.setup_ui()
        self.auto_load_first_tab()

    def setup_ui(self):
        top_frame = tk.Frame(self)
        top_frame.pack(fill="x")

        tk.Checkbutton(top_frame, text="Admin Mode", variable=self.admin_mode).pack(side="left")
        tk.Button(top_frame, text="New Tab", command=self.create_tab).pack(side="left")
        tk.Button(top_frame, text="Add Row", command=self.add_row).pack(side="left")
        tk.Button(top_frame, text="Edit Row", command=self.edit_row).pack(side="left")
        tk.Button(top_frame, text="Delete Row", command=self.delete_row).pack(side="left")

        self.tab_menu = ttk.Combobox(top_frame, textvariable=self.selected_tab, postcommand=self.refresh_tabs)
        self.tab_menu.pack(side="left", padx=10)
        tk.Button(top_frame, text="Load Tab", command=self.load_tab).pack(side="left")

        self.tree = ttk.Treeview(self)
        self.tree.pack(fill="both", expand=True)

    def refresh_tabs(self):
        cursor.execute("SELECT name FROM tabs")
        tabs = [row[0] for row in cursor.fetchall()]
        self.tab_menu["values"] = tabs
    
    def auto_load_first_tab(self):
        cursor.execute("SELECT name FROM tabs ORDER BY name ASC")
        result = cursor.fetchone()
        if result:
            first_tab = result[0]
            self.selected_tab.set(first_tab)
            self.load_tab()

    def create_tab(self):
        if not self.admin_mode.get():
            return
        tab_name = simpledialog.askstring("Tab Name", "Enter new tab name:")
        if not tab_name:
            return
        col_input = simpledialog.askstring("Columns", "Enter column names (comma-separated, include 'priority' and 'order_date'):")
        if not col_input:
            return
        columns = [c.strip() for c in col_input.split(",")]
        columns += ["created_at", "last_updated"]
        try:
            col_defs = ", ".join(f"{col} TEXT" for col in columns)
            cursor.execute(f"CREATE TABLE {tab_name} (id INTEGER PRIMARY KEY AUTOINCREMENT, {col_defs})")
            cursor.execute("INSERT INTO tabs (name) VALUES (?)", (tab_name,))
            conn.commit()
            messagebox.showinfo("Success", f"Tab '{tab_name}' created.")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def load_tab(self):
        tab = self.selected_tab.get()
        if not tab:
            return
        try:
            df = pd.read_sql_query(f"SELECT * FROM {tab}", conn)
            self.tree.delete(*self.tree.get_children())
            self.tree["columns"] = list(df.columns)
            self.tree["show"] = "headings"
            for col in df.columns:
                self.tree.heading(col, text=col, command=lambda c=col: self.sort_by_column(c))

                self.tree.column(col, width=120, anchor="center")
            for _, row in df.iterrows():
                priority = row["priority"] if "priority" in row else "Low"
                self.tree.insert("", "end", values=list(row), tags=(priority,))
            self.tree.tag_configure("High", background="tomato")
            self.tree.tag_configure("Medium", background="gold")
            self.tree.tag_configure("Low", background="pale green")
        except Exception as e:
            messagebox.showerror("Error", str(e))

    def add_row(self):
        if not self.admin_mode.get():
            return
        tab = self.selected_tab.get()
        if not tab:
            return
        cursor.execute(f"PRAGMA table_info({tab})")
        columns = [row[1] for row in cursor.fetchall() if row[1] not in ("id", "created_at", "last_updated")]
        values = []
        for col in columns:
            val = simpledialog.askstring("Input", f"Enter value for '{col}':")
            values.append(val)
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        values += [now, now]
        cursor.execute(f"INSERT INTO {tab} ({','.join(columns)}, created_at, last_updated) VALUES ({','.join(['?'] * len(values))})", values)
        conn.commit()
        self.load_tab()

    def edit_row(self):
        if not self.admin_mode.get():
            return
        tab = self.selected_tab.get()
        if not tab:
            return
        selected = self.tree.selection()
        if not selected:
            return

        row_values = self.tree.item(selected[0])["values"]
        row_id = row_values[0]

        cursor.execute(f"PRAGMA table_info({tab})")
        all_columns = [row[1] for row in cursor.fetchall()]
        editable_columns = [col for col in all_columns if col not in ("id", "created_at", "last_updated")]

        # Show dropdown window to select column
        def on_confirm():
            column_to_edit = combo.get()
            if column_to_edit not in editable_columns:
                messagebox.showerror("Error", "Invalid column selected.")
                top.destroy()
                return

            new_value = simpledialog.askstring("New Value", f"Enter new value for '{column_to_edit}':")
            if new_value is None:
                top.destroy()
                return

            now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            try:
                cursor.execute(f"UPDATE {tab} SET {column_to_edit} = ?, last_updated = ? WHERE id = ?", (new_value, now, row_id))
                conn.commit()
                self.load_tab()
            except Exception as e:
                messagebox.showerror("Error", str(e))
            top.destroy()

        top = tk.Toplevel(self)
        top.title("Select Column to Edit")
        top.geometry("300x100")
        tk.Label(top, text="Select column to edit:").pack(pady=5)
        combo = ttk.Combobox(top, values=editable_columns, state="readonly")
        combo.pack(pady=5)
        tk.Button(top, text="Confirm", command=on_confirm).pack(pady=5)

    def delete_row(self):
        if not self.admin_mode.get():
            return
        tab = self.selected_tab.get()
        selected = self.tree.selection()
        if not selected:
            return
        row_id = self.tree.item(selected[0])["values"][0]
        cursor.execute(f"DELETE FROM {tab} WHERE id = ?", (row_id,))
        conn.commit()
        self.load_tab()

    def sort_by_column(self, col):
        tab = self.selected_tab.get()
        if not tab:
            return

        # Toggle sort direction
        if hasattr(self, 'last_sort_column') and self.last_sort_column == col:
            self.sort_ascending = not self.sort_ascending
        else:
            self.sort_ascending = True
            self.last_sort_column = col

        try:
            df = pd.read_sql_query(f"SELECT * FROM {tab}", conn)
            df = df.sort_values(by=col, ascending=self.sort_ascending, na_position='last')
            self.tree.delete(*self.tree.get_children())
            for _, row in df.iterrows():
                priority = row["priority"] if "priority" in row else "Low"
                self.tree.insert("", "end", values=list(row), tags=(priority,))
        except Exception as e:
            messagebox.showerror("Sort Error", str(e))


if __name__ == "__main__":
    app = App()
    app.mainloop()
